/**
 * Service de formatage des embeds
 * Centralise le style visuel de tous les embeds du bot
 */

import { EmbedBuilder } from 'discord.js';

// Couleurs du th√®me GYX Boosts
export const COLORS = {
  PRIMARY: 0xFF0000,      // Rouge fonc√© principal
  SUCCESS: 0x00FF00,      // Vert pour succ√®s
  ERROR: 0xFF0000,        // Rouge pour erreurs
  WARNING: 0xFFA500,      // Orange pour avertissements
  INFO: 0xFF0000          // Rouge pour informations
};

// Footer par d√©faut
const DEFAULT_FOOTER = 'Partenaire Officiel GYX Engine';
const SUPPORT_LINK = 'discord.gg/gyx-engine';

/**
 * Cr√©e un embed avec le style GYX Boosts
 */
export function createEmbed(options = {}) {
  const embed = new EmbedBuilder()
    .setColor(options.color || COLORS.PRIMARY)
    .setFooter({ 
      text: options.footer || DEFAULT_FOOTER,
      iconURL: options.footerIcon
    })
    .setTimestamp(options.timestamp !== false ? new Date() : null);
  
  if (options.title) embed.setTitle(options.title);
  if (options.description) embed.setDescription(options.description);
  if (options.author) embed.setAuthor(options.author);
  if (options.thumbnail) embed.setThumbnail(options.thumbnail);
  if (options.image) embed.setImage(options.image);
  if (options.fields) embed.addFields(options.fields);
  if (options.url) embed.setURL(options.url);
  
  return embed;
}

/**
 * Cr√©e un embed de succ√®s
 */
export function successEmbed(title, description, fields = []) {
  return createEmbed({
    title: `‚úÖ ${title}`,
    description,
    color: COLORS.SUCCESS,
    fields
  });
}

/**
 * Cr√©e un embed d'erreur
 */
export function errorEmbed(title, description) {
  return createEmbed({
    title: `‚ùå ${title}`,
    description,
    color: COLORS.ERROR
  });
}

/**
 * Cr√©e un embed d'avertissement
 */
export function warningEmbed(title, description) {
  return createEmbed({
    title: `‚ö†Ô∏è ${title}`,
    description,
    color: COLORS.WARNING
  });
}

/**
 * Cr√©e un embed d'information
 */
export function infoEmbed(title, description, fields = []) {
  return createEmbed({
    title: `‚ÑπÔ∏è ${title}`,
    description,
    color: COLORS.INFO,
    fields
  });
}

/**
 * Cr√©e l'embed de bienvenue
 */
export function welcomeEmbed(member) {
  return createEmbed({
    description: `Bienvenue ${member} <:boost:1429082673241915422>\nPour toute question veuillez ouvrir un <#1428885835545317610> !`,
    color: COLORS.PRIMARY,
    thumbnail: member.user.displayAvatarURL({ dynamic: true })
  });
}

/**
 * Cr√©e un embed de log pour la mod√©ration
 */
export function moderationLogEmbed(action, moderator, target, reason = 'Aucune raison fournie') {
  const actionEmojis = {
    ban: 'üî®',
    unban: 'üîì',
    kick: 'üë¢',
    mute: 'üîá',
    unmute: 'üîä',
    warn: '‚ö†Ô∏è'
  };
  
  return createEmbed({
    title: `${actionEmojis[action] || 'üìã'} ${action.toUpperCase()}`,
    color: COLORS.WARNING,
    fields: [
      {
        name: 'Mod√©rateur',
        value: `${moderator.tag} (${moderator.id})`,
        inline: true
      },
      {
        name: 'Cible',
        value: typeof target === 'string' ? target : `${target.tag} (${target.id})`,
        inline: true
      },
      {
        name: 'Raison',
        value: reason,
        inline: false
      }
    ]
  });
}

/**
 * Cr√©e un embed de ticket
 */
export function ticketEmbed(title, description, fields = []) {
  return createEmbed({
    title: `üé´ ${title}`,
    description,
    color: COLORS.PRIMARY,
    fields
  });
}

/**
 * Cr√©e un embed de giveaway
 */
export function giveawayEmbed(prize, description, endTime, winners) {
  return createEmbed({
    title: 'üéâ GIVEAWAY üéâ',
    description: `**R√©compense:** ${prize}\n\n${description || 'R√©agis avec üéâ pour participer !'}`,
    color: COLORS.PRIMARY,
    fields: [
      {
        name: 'Nombre de gagnants',
        value: winners.toString(),
        inline: true
      },
      {
        name: 'Se termine',
        value: `<t:${Math.floor(endTime / 1000)}:R>`,
        inline: true
      }
    ],
    footer: `${DEFAULT_FOOTER} ‚Ä¢ Se termine le`
  });
}

/**
 * Cr√©e un embed de r√©sultats de giveaway
 */
export function giveawayWinnersEmbed(prize, winners) {
  const winnersList = winners.map(w => `<@${w}>`).join('\n');
  
  return createEmbed({
    title: 'üéâ GIVEAWAY TERMIN√â üéâ',
    description: `**R√©compense:** ${prize}\n\n**Gagnant(s):**\n${winnersList}`,
    color: COLORS.SUCCESS
  });
}

/**
 * Cr√©e un embed personnalis√© pour un panel de ticket
 */
export function createTicketPanelEmbed(panelData) {
  const embed = new EmbedBuilder()
    .setTitle(panelData.title || 'üé´ Support GYX Boosts')
    .setDescription(panelData.description || 'Cliquez sur le bouton ci-dessous pour ouvrir un ticket.')
    .setColor(panelData.color ? parseInt(panelData.color.replace('#', ''), 16) : COLORS.PRIMARY)
    .setFooter({ text: panelData.footer || DEFAULT_FOOTER })
    .setTimestamp();
  
  if (panelData.banner) embed.setImage(panelData.banner);
  if (panelData.thumbnail) embed.setThumbnail(panelData.thumbnail);
  
  return embed;
}

export default {
  COLORS,
  createEmbed,
  successEmbed,
  errorEmbed,
  warningEmbed,
  infoEmbed,
  welcomeEmbed,
  moderationLogEmbed,
  ticketEmbed,
  giveawayEmbed,
  giveawayWinnersEmbed,
  createTicketPanelEmbed
};
